{"pageProps":{"sourceArr":[[{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In the Derivatives Game you take the position of a derivatives trader and speculate on the value of one single stock. You can use two types of derivatives, futures and options. Your goal is to achieve the highest possible profit by speculating on the value of this stock. For the risk positions you build up as a derivatives trader, you have to deposit capital in a margin account. However, you do not have an endless amount of capital at your disposal: Your starting balance is 100 Swiss francs. You will additionally use this capital, for example, to meet a margin call or to buy or sell options. Short-term profits and losses are also credited to your account, for example through day trading or closing out a long or short position early.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All contracts expire at the end of the game and depending on the prevailing stock price, you will make a profit or a loss with your outstanding contracts. The winner is determined by the largest cash balance among the players at the end of the last period.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Irrigania is a web-based game on the shared use of limited water resources. The idea behind the game is that there are different villages with a number of farmers in each of them. The goal for each farmer is to generate the largest net in-come. However, this requires a certain amount of cooperation within the village. Each player represents one farmer in one village and has 10 fields for which he/she can decide how to use them each year. There are three options: rainfed agriculture, irrigation using river water, and irrigation using groundwater. Different costs and revenues are associated with the different types of fields. While largely simplified, these costs and revenues reflect some aspects of reality. Rainfed agriculture has the lowest costs, but also less revenue than the other options. With irrigation, more can be produced both in terms of quantity and quality, which is reflected by higher revenues, but also by higher costs. In the case of river water irrigation, the cost is fixed, but the income can be reduced if the river water has to be distributed among too many fields in a village. In the case of groundwater-based irrigation, the revenue is fixed, but the costs increase if the depth to groundwater increases.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since overuse of resources could lower the payoff drastically, and the groundwater level might take several years to recover, some cooperation within the village and willingness to not overuse the resources is necessary to be able to win the game. However, in order to win, a farmer needs to do better than the other farmers within the village. Therefore, a farmer needs to find the subtle balance between supporting the village in not overusing the resources, while at the same time trying to generate more income than the other farmers within his/her village.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In the Portfolio Management Game you and your team take on the role as a manager of a bank’s portfolio management and compete with different teams. Based on a computer-assisted simulation, the entire investment process is simulated from the perspective of an asset manager using historical or fictitiously generated business cycles.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will be assigned client types for whom you select suitable asset management mandates based on their respective needs. In a next step you formulate the investment strategy of the client's portfolios and work out both a strategic and tactical investment strategy. The latter is based on forecasts of the business cycle, which you receive at the beginning of every investment period. Subsequently, the strategy will be implemented. You have to choose between active and passive management as well as a top-down or bottom-up approach and select the individual securities. The performance is measured and evaluated periodically. Decisions are made on the bank’s business factors such as conditions & fees, human resources, logistics and profit distribution.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Private Banking Advisory Game helps players to learn how to carry out holistic investment advisory discussions. The game design requires the player to manage the triangular relationship between profits (thinking in terms of the company), customer satisfaction (thinking in terms of the customer), and soft skills (being friendly and empathetic).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Client satisfaction is highly dependent on choosing the right investment strategy. Therefore, the client-advisor must determine the client’s needs (risk, return, unique circumstances) with the client and propose the right strategy. This strategy forms the bridge between the client and asset management. This serious game intends to train people for the holistic consulting process.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Private Banking Advisory Game puts the player in the role of an investment advisor (senior consultant) at the \", _jsx(_components.em, {\n        children: \"uFin\"\n      }), \" bank. During the game, the advisor conducts two investment advisory talks with the target to allocate a suitable investment strategies to both clients and assign a bias to one of the two clients. After the two advisory meetings, the supervisor provides the player a feedback about his investment strategy selection and bias allocation. After getting feedback, the player can either restart the game or finish the game.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Private Banking Advisory Game is not designed for comparison between students. The player should only focus on his personal performance improvement.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Nowadays, many companies face the challenge of ensuring compliance with codes of conduct and strengthening a value-based corporate culture. While more rules and investment in compliance strategies were among the dominant strategies up to now, this game focuses on the promotion of individual skills and thus complements current practices in an optimal way. For this purpose, uFin: The Challenge was developed and empirically tested.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In uFin: The Challenge, players are confronted with ethical conflicts that are closely related to everyday life and are urged to take concrete action. The game shows what consequences result from one's own actions. Only those who meet these challenges appropriately can prevent a scandal.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}],[{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}]],"frontMatterArr":[[{"slug":"derivatives-game","title":"Derivatives Game","href":"/games/derivatives-game","imgSrc":"/images/derivatives_1.png","tags":["DBF","Simulation","Derivatives Trading"],"subtitle":"A simulation for a better understanding of exchange-traded financial derivatives","objectives":["Understand the elementary differences between futures and options","Be able to take long and short positions in futures and options and close them out","Get to know the process of derivatives trading from the formation of a contract to its maturity date"],"scenarios":["University education and training","In-house training"],"language":["en","de"],"keywords":["derivatives trading","simulation","web-based"],"imprint":"Department of Banking and Finance, University of Zurich","contact":"[Dr. Benjamin Wilding](https://www.bf.uzh.ch/de/persons/wilding-benjamin), Department of Banking and Finance, University of Zurich","radarCharts":[{"name":"Characteristics","text":"In Progress","content":[{"name":"Analytic Thinking","value":9},{"name":"Collaboration","value":2},{"name":"Competition","value":7},{"name":"Entertainment","value":3},{"name":"Prior Knowledge","value":6},{"name":"Soft Skills","value":2}]},{"name":"GamificationElements","text":"In Progress","content":[{"name":"Epic Meaning","value":4},{"name":"Empowerment","value":4},{"name":"Social Influence","value":2},{"name":"Unpredictability","value":8},{"name":"Avoidance","value":8},{"name":"Scarcity","value":2},{"name":"Ownership","value":8},{"name":"Accomplishment","value":7}]}],"thumbnail":"/images/derivatives_2.png","gallery":[{"imgSrc":"/images/derivatives_2.png","alt":"Derivatives Game Image 1"},{"imgSrc":"/images/derivatives_1.png","alt":"Derivatives Game Image 2"}]},{"slug":"irrigania","title":"Irrigania","href":"/games/irrigania","imgSrc":"/images/irrigania_hero.png","tags":["GEO","Simulation","Water Management"],"subtitle":"A web-based game about sharing water resources","objectives":["Teaching about collaboration and conflicts with regard to shared water resources","Illustration of a tragedy-of-the-commons situation related to water management","Understanding the difference between stream water resources and groundwater resources in their response to overuse and their potential recovery"],"scenarios":["University education and training"],"language":["en"],"usedIn":[{"name":"ESS371 – Wasser und Mensch"}],"keywords":["shared water resources","tragedy-of-the-commons","web-based"],"imprint":"Department of Geography, University of Zurich","contact":"Prof. Dr. Jan Seibert (jan.seibert@geo.uzh.ch), Marc Vis (marc.vis@geo.uzh.ch), Hydrology and Climate, Department of Geography","gallery":[{"imgSrc":"/images/irrigania1.png","alt":"Irrigania 1"},{"imgSrc":"/images/irrigania2.png","alt":"Irrigania 2"}],"resources":[{"name":"Research Paper: Seibert, J. and Vis, M. (2012)","href":"https://hess.copernicus.org/articles/16/2523/2012/"},{"name":"Website","href":"https://www.irrigania.ch"}]},{"slug":"portfolio-management-simulation","title":"Portfolio Management Simulation","href":"/games/portfolio-management-simulation","imgSrc":"/images/pfm_game.png","tags":["DBF","Simulation","Investing"],"subtitle":"A simulation to improve decision-making ability","objectives":["Acquire knowledge of portfolio management and investment processes","Get to know the success factors and conflicting goals of business management in a department","Promotion of decision-making and communication skills"],"scenarios":["University education and training","In-house training"],"language":["en"],"usedIn":[{"name":"Advanced Portfolio Management Game (S)"}],"keywords":["investing","simulation","web-based"],"imprint":"Department of Banking and Finance, University of Zurich","contact":"[Dr. Benjamin Wilding](https://www.bf.uzh.ch/de/persons/wilding-benjamin), Department of Banking and Finance, University of Zurich","radarCharts":[{"name":"Characteristics","text":"The Portfolio Management Game enables its users to cooperate as a management of a private bank while competing for customers against other management teams. Thereby they apply their knowledge in the field of asset management.","content":[{"name":"Analytic Thinking","value":8},{"name":"Collaboration","value":7},{"name":"Competition","value":8},{"name":"Entertainment","value":4},{"name":"Prior Knowledge","value":7},{"name":"Soft Skills","value":2}]},{"name":"GamificationElements","text":"Within the Portfolio Management Game users analyse economic outlooks that help them to deal with the unpredictability of the financial markets. They try to avoid losses for their clients and their company. Additionally, the users target to accomplish an improvement of their portfolio management skills.","content":[{"name":"Epic Meaning","value":4},{"name":"Empowerment","value":6},{"name":"Social Influence","value":6},{"name":"Unpredictability","value":8},{"name":"Avoidance","value":8},{"name":"Scarcity","value":2},{"name":"Ownership","value":8},{"name":"Accomplishment","value":8}]}],"thumbnail":"/images/uploads/pfm_game.png","gallery":[{"imgSrc":"/images/pfm/pfm_scatter.png","alt":"Portfolio Management Simulation Image 1"},{"imgSrc":"/images/pfm/pfm_radar.png","alt":"Portfolio Management Simulation Image 2"},{"imgSrc":"/images/pfm/pfm_outlook.png","alt":"Portfolio Management Simulation Image 3"},{"imgSrc":"/images/pfm/pfm_depot.png","alt":"Portfolio Management Simulation Image 4"},{"imgSrc":"/images/pfm/pfm_allocation.png","alt":"Portfolio Management Simulation Image 5"}]},{"slug":"private-banking-game","title":"Private Banking Advisory Game","href":"/games/private-banking-game","imgSrc":"/images/under_construction.jpg","tags":["DBF","Serious Game","Banking","Work in Progress"],"subtitle":"A serious game to enhance your understanding of risk and return in an investment context","objectives":["The participant is able to identify risk/return relations","The participant is able to perform holistic investment advisory talks","The participant is sensitive to behavioural biases","The participant is able to assign the correct investment strategies for different types of clients"],"scenarios":["University education and training","In-house training"],"language":["en"],"keywords":["advisory","serious game","tablet","web-based"],"imprint":"Department of Banking and Finance, University of Zurich","contact":"[Dr. Benjamin Wilding](https://www.bf.uzh.ch/de/persons/wilding-benjamin), Department of Banking and Finance, University of Zurich","radarCharts":[{"name":"Characteristics","text":"The Private Banking Advisory Game emphasizes the enhancement of soft skills in the field of client advisory in private banking while providing a high entertainment value.","content":[{"name":"Analytic Thinking","value":5},{"name":"Collaboration","value":1},{"name":"Competition","value":1},{"name":"Entertainment","value":7},{"name":"Prior Knowledge","value":4},{"name":"Soft Skills","value":8}]},{"name":"GamificationElements","text":"Within the Private Banking Advisory Game the users engage in a creative process. They have to figure out how to interact with clients. They experience an epic meaning by believing that they are chosen to handle important client within a private bank.","content":[{"name":"Epic Meaning","value":6},{"name":"Empowerment","value":8},{"name":"Social Influence","value":6},{"name":"Unpredictability","value":6},{"name":"Avoidance","value":6},{"name":"Scarcity","value":2},{"name":"Ownership","value":2},{"name":"Accomplishment","value":6}]}]},{"slug":"ufin","title":"uFin: The Challenge","href":"/games/u-fin","imgSrc":"/images/ufin.jpg","tags":["DBF","Serious Game","Ethics"],"subtitle":"Promoting Values in Business through Digital Games","objectives":["Establish and improve a sensorium for violations of rules and ethical standards","Sharpen the perception of blind spots in the personal value system","Strengthen empathic perception of the needs and interests of others"],"scenarios":["University education and training","Ethics and compliance training","In-house training"],"language":["de"],"usedIn":[{"name":"Behavioral Ethics (S)"}],"keywords":["business ethics","serious game","sustainable finance","tablet"],"imprint":"Prof. Dr. Carmen Tanner, PD Dr. Markus Christen, Dr. David Schmocker, and Johannes Katsarov (game development), koboldgames GmbH ([www.koboldgames.ch](http://www.koboldgames.ch/), technical implementation)","contact":"[Prof.Dr. Carmen Tanner](https://www.bf.uzh.ch/de/persons/tanner-carmen), Department of Banking and Finance UZH, Center for Responsibility in Finance","radarCharts":[{"name":"Characteristics","text":"The game uFin: The Challenge emphasizes the enhancement of soft skills while providing a high entertainment value.","content":[{"name":"Analytic Thinking","value":6},{"name":"Collaboration","value":2},{"name":"Competition","value":2},{"name":"Entertainment","value":7},{"name":"Prior Knowledge","value":4},{"name":"Soft Skills","value":9}]},{"name":"GamificationElements","text":"Within the game uFin: The Challenge the users engage in a creative process where they have to figure out ethical decisions. They experience an epic meaning by believing that they are chosen to solve a bigger ethical issue within the company.","content":[{"name":"Epic Meaning","value":8},{"name":"Empowerment","value":8},{"name":"Social Influence","value":8},{"name":"Unpredictability","value":6},{"name":"Avoidance","value":4},{"name":"Scarcity","value":2},{"name":"Ownership","value":2},{"name":"Accomplishment","value":8}]}],"thumbnail":"/images/uploads/9ff6392f-9578-4058-b9a4-3e71b10c7b72.jpg"}],[{"name":"Advanced Portfolio Management Game (S)","level":"Master","semester":"Fall","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/003/SM/50499168","publish":false},{"name":"An Introduction to Revenue Management and Pricing (S)","level":"Master","semester":"Fall","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/003/SM/51061825","publish":false},{"name":"Banking Game: Gesamtführung einer Bank (S)","level":"Bachelor","semester":"Spring","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2020/004/SM/50354580","publish":false},{"name":"Behavioral Ethics (S)","level":"Bachelor","semester":"Spring","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2020/004/SM/50821473","publish":false},{"name":"Business- & Finance-Game (S)","level":"Bachelor","semester":"Fall","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/003/SM/50340267","publish":false},{"name":"Commodity Trading (L+E)","level":"Master","semester":"Spring","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2020/004/SM/50938958","publish":false},{"name":"Finance for the Future: Investments, Sustainable Finance & FinTech (Summer School)","level":"Bachelor","semester":"Spring","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2020/004/SM/50939506","publish":false},{"name":"Industrieplanspiel (General Management Business Simulation Game) (S)","level":"Master","semester":"Spring","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/004/SM/51042638","publish":false},{"name":"Introduction to Digital Games","level":"Bachelor","semester":"Fall","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/003/SM/51078576","publish":false},{"name":"Introduction to Strategic Management (L+E)","level":"Bachelor","semester":"Spring","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/004/SM/50771677","publish":false},{"name":"Lebendige Lehre mit Mini-Planspielen, virtuell und real","ects":null,"level":null,"semester":"Fall","institution":"Didactica","href":"https://www.didactica.uzh.ch/","publish":false},{"name":"Marketing Strategy (S)","level":"Bachelor","semester":"Fall","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/003/SM/50821262","publish":false},{"name":"Negotiating successfully to a win-win result","level":"PhD","semester":"Fall","institution":"UZH","href":"https://studentservices.uzh.ch/uzh/anonym/vvz/?sap-language=EN&sap-ui-language=EN#/details/2021/003/SM/50884564","publish":false}]],"filenames":[["Derivatives Game","Irrigania","Portfolio Management Simulation","Private Banking Game","U Fin"],["Advanced Portfolio Management Game (S)","An Introduction to Revenue Management and Pricing (S)","Banking Game: Gesamtfuehrung einer Bank (S)","Behavioral Ethics (S)","Business- & Finance-Game (S)","Commodity Trading (L+E)","Finance for the Future: Investments, Sustainable Finance & FinTech (Summer School)","Industrieplanspiel (General Management Business Simulation Game) (S)","Introduction to Digital Games","Introduction to Strategic Management (L+E)","Lebendige Lehre mit Mini-Planspielen, virtuell und real","Marketing Strategy (S)","Negotiating successfully to a win-win result"]],"fileMissingArr":[[false,false,false,false,false],[false,false,false,false,false,false,false,false,false,false,false,false,false]]},"__N_SSG":true}