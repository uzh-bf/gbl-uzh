### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Achievement {
  description: String!
  id: ID!
  image: String
  name: String!
  reward: JSONObject
  when: AchievementFrequency!
}

enum AchievementFrequency {
  EACH
  FIRST
}

type AchievementInstance {
  achievement: Achievement!
  count: Int!
  id: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
  type: String
}

type Game {
  activePeriod: Period
  activePeriodIx: Int
  activeSegmentIx: Int
  id: ID!
  name: String!
  periods: [Period!]!
  playerCount: Int
  players: [Player!]!
  status: GameStatus!
}

enum GameStatus {
  COMPLETED
  CONSOLIDATION
  PAUSED
  PREPARATION
  RESULTS
  RUNNING
  SCHEDULED
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LearningAnswerOption {
  content: String!
  correct: Boolean!
  id: ID!
}

type LearningElement {
  feedback: String
  id: ID!
  motivation: String
  options: [LearningAnswerOption!]!
  question: String!
  reward: JSONObject
  title: String!
}

type LearningElementAttempt {
  element: LearningElement
  id: ID
  player: Player
  pointsAchieved: Int
  pointsMax: Int
}

type LearningElementState {
  element: LearningElement
  id: ID
  solution: String
  state: String
}

type Mutation {
  activateNextPeriod(gameId: Int!): Game
  activateNextSegment(gameId: Int!): Game
  addCountdown(gameId: Int!, seconds: Int!): Boolean
  addGamePeriod(facts: PeriodFactsInput!, gameId: Int!): Period
  addPeriodSegment(facts: PeriodSegmentFactsInput!, gameId: Int!, learningElements: [String], periodIx: Int!, storyElements: [String]): PeriodSegment
  attemptLearningElement(elementId: ID!, selection: String!): LearningElementAttempt
  createGame(name: String!, playerCount: Int!): Game
  loginAsTeam(token: String!): Player
  logoutAsTeam: Boolean
  markStoryElement(elementId: ID!): Player
  performAction(payload: String!, type: String!): PlayerResult
  saveConsolidationDecision(payload: String!): PlayerDecision
  updatePlayerData(avatar: String, color: String, facts: String, name: String): Player
  updateReadyState(isReady: Boolean!): Player
}

type Period {
  actions: [PlayerAction!]!
  activeSegment: PeriodSegment
  activeSegmentIx: Int
  facts: JSONObject!
  id: ID!
  index: Int!
  results: [PlayerResult!]!
  segments: [PeriodSegment!]!
}

input PeriodFactsInput {
  rollsPerSegment: Int = 3
  scenario: PeriodFactsScenarioInput = {bankReturn: 0.002, gapBonds: 0.005, gapStocks: 0.025, seed: 0, trendBonds: 0.0031, trendStocks: 0.0065}
}

input PeriodFactsScenarioInput {
  bankReturn: Float = 0.002
  gapBonds: Float = 0.005
  gapStocks: Float = 0.025
  seed: Int = 0
  trendBonds: Float = 0.0031
  trendStocks: Float = 0.0065
}

type PeriodSegment {
  actions: [PlayerAction!]!
  countdownExpiresAt: DateTime
  facts: JSONObject!
  id: ID!
  index: Int!
  learningElements: [LearningElement!]!
  periodIx: Int!
  results: [PlayerResult!]!
  storyElements: [StoryElement!]!
}

input PeriodSegmentFactsInput {
  bankPercentage: Float
  bondsPercentage: Float
  stockPercentage: Float
}

type Player {
  achievementIds: [String!]!
  achievementKeys: [String!]!
  achievements: [AchievementInstance!]!
  avatar: String!
  color: String!
  completedLearningElementIds: [String!]!
  completedLearningElements: [LearningElement!]!
  experience: Int!
  experienceToNext: Int!
  facts: JSONObject!
  id: ID!
  isReady: Boolean!
  level: PlayerLevel!
  levelIx: Int!
  location: String!
  name: String!
  number: Int!
  role: String
  token: String!
  tutorialCompleted: Boolean!
  visitedStoryElementIds: [String!]!
  visitedStoryElements: [StoryElement!]!
}

type PlayerAction {
  facts: JSONObject
  id: ID!
  period: Period!
  periodIx: Int!
  player: Player!
  segment: PeriodSegment
  segmentIx: Int
  type: String!
}

type PlayerDecision {
  facts: JSONObject!
  id: ID!
  period: Period!
  periodIx: Int!
  player: Player!
  type: PlayerDecisionType!
}

enum PlayerDecisionType {
  CONSOLIDATION
  PREPARATION
}

type PlayerLevel {
  description: String!
  id: ID!
  index: Int!
  requiredXP: Int!
}

type PlayerResult {
  facts: JSONObject
  id: ID!
  period: Period!
  player: Player!
  segment: PeriodSegment
  type: PlayerResultType
}

enum PlayerResultType {
  PERIOD_END
  PERIOD_START
  SEGMENT_END
  SEGMENT_START
}

type PlayerState {
  currentGame: Game
  playerResult: PlayerResult
  previousResults: [PlayerResult!]
  transactions: [PlayerAction!]
}

type Query {
  game(id: Int): Game
  games: [Game!]
  learningElement(id: ID!): LearningElementState
  learningElements: [LearningElement!]
  pastResults: [PlayerResult!]
  result: PlayerState
  results: [PlayerResult!]
  self: Player
}

type StoryElement {
  content: String
  contentRole: JSONObject
  id: ID!
  reward: JSONObject
  title: String!
  type: StoryElementType!
}

enum StoryElementType {
  GENERIC
  ROLE_BASED
}

type Subscription {
  eventsGlobal: [Event!]
  eventsUser: [Event!]
}

enum UserRole {
  ADMIN
  MASTER
}