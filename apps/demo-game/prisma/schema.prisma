datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "postgresqlExtensions", "fieldReference", "extendedWhereUnique"]
}

model Account {
  id                       Int     @id @default(autoincrement())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @map("refreshToken")
  refresh_token_expires_in Int?    @map("refreshTokenExpiresIn")
  access_token             String? @map("accessToken")
  expires_at               Int?    @map("expiresAt")
  token_type               String? @map("tokenType")
  scope                    String?
  id_token                 String? @map("idToken")
  session_state            String? @map("sessionState")
  oauth_token_secret       String? @map("oauthTokenSecret")
  oauth_token              String? @map("oauthToken")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.Uuid
}

enum UserRole {
  ADMIN
  MASTER
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(ADMIN)

  accounts Account[]
  sessions Session[]
  games    Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GameStatus {
  SCHEDULED

  PREPARATION
  RUNNING
  PAUSED
  CONSOLIDATION
  RESULTS

  COMPLETED
}

model Game {
  id Int @id @default(autoincrement())

  status GameStatus @default(SCHEDULED)

  name String

  decisions PlayerDecision[]
  actions   PlayerAction[]
  players   Player[]
  periods   Period[]
  results   PlayerResult[]

  activePeriodIx Int     @default(-1)
  activePeriodId Int?
  activePeriod   Period? @relation("activePeriod", fields: [activePeriodId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  segments PeriodSegment[]

  achievements AchievementInstance[]

  ownerId String @db.Uuid
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Period {
  id Int @id @default(autoincrement())

  index Int

  facts Json

  segments PeriodSegment[]

  activeSegmentIx Int            @default(-1)
  activeSegmentId Int?
  activeSegment   PeriodSegment? @relation("activeSegment", fields: [activeSegmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  decisions    PlayerDecision[]
  results      PlayerResult[]
  actions      PlayerAction[]
  achievements AchievementInstance[]

  previousPeriod Period[] @relation("periodSequence")
  nextPeriodId   Int?
  nextPeriod     Period?  @relation("periodSequence", fields: [nextPeriodId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  Game Game[] @relation("activePeriod")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, index])
}

model PeriodSegment {
  id Int @id @default(autoincrement())

  index Int

  facts Json

  actions PlayerAction[]
  results PlayerResult[]

  learningElements LearningElement[]
  storyElements    StoryElement[]

  period   Period @relation(fields: [periodId], references: [id])
  periodId Int
  periodIx Int

  Period Period[] @relation("activeSegment")

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  previousSegment PeriodSegment[] @relation("segmentSequence")
  nextSegmentId   Int?
  nextSegment     PeriodSegment?  @relation("segmentSequence", fields: [nextSegmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, periodIx, index])
}

model Player {
  id String @id @default(uuid()) @db.Uuid

  name     String  @default("Cocoa AG")
  avatar   String  @default("")
  location String  @default("")
  color    String  @default("White")
  isReady  Boolean @default(false)

  experience        Int         @default(0)
  experienceToNext  Int         @default(100)
  level             PlayerLevel @relation(fields: [levelIx], references: [index])
  levelIx           Int
  tutorialCompleted Boolean     @default(false)

  facts Json

  role String?

  token String @unique

  actions   PlayerAction[]
  results   PlayerResult[]
  decisions PlayerDecision[]

  achievementKeys String[]
  achievementIds  String[]
  achievements    AchievementInstance[]

  completedLearningElements   LearningElement[]
  completedLearningElementIds String[]

  visitedStoryElements   StoryElement[]
  visitedStoryElementIds String[]

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerAction {
  id Int @id @default(autoincrement())

  type  String
  facts Json

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  playerId String @db.Uuid
  player   Player @relation(fields: [playerId], references: [id])

  periodId Int
  periodIx Int
  period   Period @relation(fields: [periodId], references: [id])

  segmentId Int?
  segmentIx Int?
  segment   PeriodSegment? @relation(fields: [segmentId], references: [id])

  createdAt DateTime @default(now())
}

enum PlayerResultType {
  PERIOD_START
  SEGMENT_START
  SEGMENT_END
  PERIOD_END
}

model PlayerResult {
  id Int @id @default(autoincrement())

  type PlayerResultType

  facts Json

  playerId String @db.Uuid
  player   Player @relation(fields: [playerId], references: [id])

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  periodId Int
  periodIx Int
  period   Period @relation(fields: [periodId], references: [id])

  segmentId Int?
  segmentIx Int?
  segment   PeriodSegment? @relation(fields: [segmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([periodIx, segmentIx, playerId, type])
}

enum PlayerDecisionType {
  PREPARATION
  CONSOLIDATION
}

model PlayerDecision {
  id Int @id @default(autoincrement())

  type PlayerDecisionType

  facts Json

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  playerId String @db.Uuid
  player   Player @relation(fields: [playerId], references: [id])

  periodId Int
  periodIx Int
  period   Period @relation(fields: [periodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([playerId, periodIx, type])
}

model PlayerLevel {
  id Int @id @default(autoincrement())

  index Int @unique

  description String
  image       String

  requiredXP Int

  players Player[]
}

model Event {
  id String @id

  achievements Achievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AchievementFrequency {
  FIRST
  EACH
}

model Achievement {
  id String @id

  name        String
  description String
  image       String?

  onEventId String
  onEvent   Event                @relation(fields: [onEventId], references: [id])
  when      AchievementFrequency

  reward Json?

  instances AchievementInstance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AchievementInstance {
  id Int @id @default(autoincrement())

  count Int @default(1)

  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String

  playerId String @db.Uuid
  player   Player @relation(fields: [playerId], references: [id])

  periodId Int
  period   Period @relation(fields: [periodId], references: [id])

  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([playerId, achievementId])
}

model LearningAnswerOption {
  id Int @id @default(autoincrement())

  content  String
  correct  Boolean
  feedback String?

  learningElement     LearningElement @relation(fields: [learningElementSlug], references: [id])
  learningElementSlug String
}

model LearningElement {
  id String @id

  title      String
  question   String
  options    LearningAnswerOption[]
  feedback   String?
  motivation String?

  reward Json?

  periodSegments PeriodSegment[]

  players Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StoryElementType {
  GENERIC
  ROLE_BASED
}

model StoryElement {
  id String @id

  title String

  type StoryElementType @default(GENERIC)

  content     String?
  contentRole Json?

  reward Json?

  periodSegments PeriodSegment[]

  players Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
